<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-10-18T22:52:37-04:00</updated><id>http://localhost:4000/feed.xml</id><entry><title type="html">greatest city in the world, they said…</title><link href="http://localhost:4000/blog/2024/12/26/hackny/" rel="alternate" type="text/html" title="greatest city in the world, they said…" /><published>2024-12-26T00:00:00-05:00</published><updated>2024-12-26T00:00:00-05:00</updated><id>http://localhost:4000/blog/2024/12/26/hackny</id><content type="html" xml:base="http://localhost:4000/blog/2024/12/26/hackny/"><![CDATA[<p>There are <a href="https://hackny.org/blog/application-spotlight-luna">plenty</a> <a href="https://hackny.org/blog/application-spotlight-pauline">of</a> <a href="https://hackny.org/blog/application-spotlight-dlet">posts</a> <a href="https://hackny.org/blog/application-spotlight-gloria">that</a> talk about how awesome HackNY is, and they’re <strong>worth the read</strong>! I agree with them, but I’d like to share a more candid viewpoint. I want to share how HackNY fits into my story, with hopes that it might give you a bit more perspective if you’re thinking about joining HackNY.</p>

<p>To provide a bit of context on where I’m coming from:</p>

<ul>
  <li>I’ve competed in about 45 hackathons, mostly in high school. I remember packing my weekends with hackathons because I had so much fun just building things. Building projects at hackathons is largely why I pursue software as a career.</li>
  <li>My internship in New York was my 6th internship, my 3rd in the US, but most importantly, my first in New York!!</li>
  <li>I’m lucky to go to a school with a pretty robust co-op program (a bunch of people from my school go all over US and Canada for internships). As a result, I already knew a few people who would be in New York.</li>
</ul>

<p>When I first learned about HackNY from my friend &amp; schoolmate (who later became my roommate lolz), I thought that it would have been perfect for the person I was 6 years ago, when I was deeply engaged with hackathon culture. Even after the program, I can say (with reasonable certainty) that this is still the case. To explain what I mean, I need to give a bit more context on HackNY’s founding mission, since I didn’t even understand it when I started.</p>

<h1 id="hacknys-founding-mission">HackNY’s founding mission</h1>

<ul>
  <li>HackNY was originally created in 2010 to give undergrad + junior tech a foothold in new york, which was very finance-driven</li>
  <li>At the time, HackNY matched fellows with NYC tech startups, who then sponsored the programming and housing fees for fellows</li>
</ul>

<p>When I was deep in hackathon culture, I would have absolutely loved HackNY. The opportunity to work at a startup in the summer with next to no prior experience, while living in new york? That would have been a dream for me!</p>

<p>Even better, HackNY’s yearly student hackathon was one of the very first student hackathons. As someone who was addicted to them in high school, I can appreciate the community of other students who are really excited about tech.</p>

<p>That’s why I think the original mission of HackNY was so powerful. Early alumni I met during my summer echoed this - <strong>HackNY changed their life</strong>. It was a small community of genuine, curious people in the New York tech scene that they could call upon for advice, a helping hand, or a fun night out. It helped them get their foot in the tech scene, and many now hold senior positions at tech startups and established companies.</p>

<p>But now, there are a ton of hackathons all over the world, and tech has embedded itself into NYC as its own industry. So, that raises the question: what exactly can HackNY provide now?</p>

<h2 id="before">Before:</h2>
<ul>
  <li>HackNY matched applicants to startups that were looking for interns</li>
  <li>In exchange, those startups <strong>fully covered</strong> the <strong>programming and housing fees</strong> for HackNY fellows</li>
</ul>

<h2 id="now">now,</h2>
<ul>
  <li>HackNY fellows join the program (generally) with summer internships they <strong>find on their own</strong></li>
  <li><strong>Fellows cover the cost of the program</strong>, including housing, which is about $2k/month</li>
</ul>

<h1 id="finding-an-internship-on-your-own">Finding an internship on your own.</h1>
<p>This is already pretty hard. HackNY isn’t much of a foothold for students to get into tech if they can already get internships on their own.</p>

<p>The organizing team for HackNY realizes this - they’ve shifted their focus towards social impact.</p>

<p>But, that brings me to my next point: <strong>fellows cover the housing and programming fees for the program.</strong></p>

<h1 id="fees-or-tax">Fees? Or Tax?</h1>

<p>Fellows cover the cost of the program, including housing, which is $2k/month for a total of $5k. This was a lot to share a bedroom with one other person and a unit with 2 others (I loved my roommates, don’t get me wrong, but you can definitely at least get your own room for this much in NYC.)</p>

<p>But, if you’re from HackNY, you’re probably shaking your fist at me, saying that the 2k is more than just housing - it also covers programming. If you break that down though, the actual cost of the dorm we had in NYU housing was about $374/week, which means that you’re effectively paying $504/month for the program. In other words, you’re expecting that the program delivers to you at least $504 in value every month (I use the numbers here more to demonstrate the point that the fellows are expecting the program to consistently deliver value every month).</p>

<p>This, I think, was the concern I was most vocal about during my time in HackNY:</p>

<p>The people in HackNY are absolutely amazing - the mentors taught me a lot about my own thinking, and while I didn’t get close to many of the other fellows, the lessons I learned from the fellows and my roommates will stay with me for the rest of my life. That being said, the programming (during my term) was hit or miss.</p>

<p>There were quite a few hits:</p>
<ul>
  <li>Talking with Hursh, the CTO of The Browser Company making the Arc Browser</li>
  <li>Talking with Erica Du - founder of Toko</li>
  <li>Talking with Tracy Chou - founder of block party, privacy party</li>
  <li>A talk with a contributor of JustFix - applying data to create tools &amp; reports about NYC housing is awesome</li>
  <li>(These left the strongest impression on me, and there were other hits!!)</li>
</ul>

<p>But there were a few misses:</p>

<ul>
  <li>A talk about how to start unions at work and policy tech</li>
  <li>A talk that started about donating cooked meals from excess food from grocery stores, that devolved into just 2 ppl shooting the shit…</li>
</ul>

<p>I know that I am not the primary audience for the talk about starting unions at work. The idea of challenging my workplace is daunting, given that I enter the US on a work visa that can be revoked at any time. It wasn’t the flashiest talk (which is why I was 1 of 2 fellows who came to watch the talk, though a handful joined late), but I really didn’t know what I gained from the talk.</p>

<p>When I discussed my opinions about the talk with the current and previous directors of HackNY, I got an answer that was basically “different people are optimizing for different things” and “we’d like to spark this kind of discussion” (I’m paraphrasing from a conversation that I had a few months ago, forgive me if it’s not exactly right, but I think it covers the general idea). When I talked to the other fellows, they also gave me the sense that they didn’t really learn much from the talk.</p>

<p>And maybe, the directors are right. Maybe, I’ll remember this talk for years to come, and it will help me mature later in life when I finally make the connections it was trying to show me. However, for a talk that ~6 fellows showed up for, and is part of the resources that the fellows are paying for, it’s hard to take those messages home and feel like I’ve been given something valuable.</p>

<p>And that’s what really drives the trouble here - the program is funded by the fellows. I remember, really early in the summer, I wanted to run a chess workshop. I wanted to get a chess set so that I could play a game with my roommate (who’s ~2000 rated) and share chess with the other fellows. But, I got some pushback, expressing that a chess set might not be a necessary purchase.</p>

<p>This is understandable, but gives an idea of how HackNY runs - it’s mission-driven, not profitable, which is a bit of a double-edged sword as one of the mentors taught me. It’s hard to get funding, but you know that any funding you can get can be completely funneled into HackNY initiatives.</p>

<p>But, then it felt unclear how that money was spent. Normally, I wouldn’t care about this. I don’t care at hackathons how they choose to spend their money, because I know everything is free for me as a hacker. However, because I, as a fellow, am funding the program, I suddenly have a MASSIVE interest in where the funding is going (after all, I was even told several times that it was my money). When I saw money being spent during our program, I often wondered whether it was the right call - was a chess set really such an unnecessary purchase compared to some of these expenses? <strong>The program fee was less like something that we fellows pooled together to do cool stuff, and more like a tax I paid to the organization in exchange for housing and 2 talks a week.</strong></p>

<p>After I got over the initial disillusionment, I realized that this was a good opportunity to have my own kind of fun: how can I recoup the most of my program fee? That thought eventually materialized into a chess workshop inspired by Chinese and Indian cultures where I required that we cater several different types of Indian and Chinese desserts. My only regret is that I couldn’t push the workshop bill to more than $300. But, I’m still the sucker, given that I couldn’t recoup my $504 that month.</p>

<p>Honestly, that’s about it. The program fee really puts all of this on your mind, but if it were free I would sweep all my concerns under the rug and just say <em>“hey, it’s free, so who cares if the bathtub nearly overflows every time I try to shower”</em>.</p>

<p>So why did I join HackNY?</p>

<ul>
  <li>affordable housing</li>
</ul>

<p>jkjk</p>

<p>it was affordable housing + the community. The housing did not quite end up being as affordable as I’d thought, but my individual search for housing in New York was rather fruitless - every place I looked at was soo expensive. I also mean what I say about the fellows, my roommates and the mentors - I will remember their lessons for the rest of my life.</p>

<p>HackNY was a good mix - was more expensive than I thought was necessary for the housing, but was a cool experience! Also, NYU has some incredible facilities!! I am so glad that I swam in the NYU pools and definitely did NOT sneak into the music rooms to play on those beautiful, beautiful Steinways…</p>

<p>that’s about it…</p>

<p>all in all, I’d make sure that you have the right expectations going into HackNY 👍</p>

<p><strong>Huge thanks to my editors for making this sound coherent and intelligible!! &lt;3</strong></p>]]></content><author><name></name></author><summary type="html"><![CDATA[There are plenty of posts that talk about how awesome HackNY is, and they’re worth the read! I agree with them, but I’d like to share a more candid viewpoint. I want to share how HackNY fits into my story, with hopes that it might give you a bit more perspective if you’re thinking about joining HackNY.]]></summary></entry><entry><title type="html">Try it and see!</title><link href="http://localhost:4000/blog/2024/01/04/try-it-and-see/" rel="alternate" type="text/html" title="Try it and see!" /><published>2024-01-04T00:00:00-05:00</published><updated>2024-01-04T00:00:00-05:00</updated><id>http://localhost:4000/blog/2024/01/04/try-it-and-see</id><content type="html" xml:base="http://localhost:4000/blog/2024/01/04/try-it-and-see/"><![CDATA[<p>I asked my friend, who is much further in his SWE career, how to improve as a software engineer.</p>

<p>He started with just, <strong>scale</strong>, that I should build projects at “large-scale”. “Large-scale”, as I later found out, generally means that your service needs to support high loads, respond really fast, or process extremely large amounts of data (sometimes you need to do more than one of these things). To meet these requirements, you make guarantees about your service through metrics like availability, latency or throughput. I initially thought that this was something you only really encounter in infra teams, but my friend disagreed. It’s something that can be observed through any project <strong>at scale</strong>.</p>

<p>After a lot of reflection, I realized that he was right! I even had a similar learning experience: scaling <a href="https://github.com/dhrumilp15/haystackfs">Haystackfs</a>, my file search engine for discord, to 380+ servers and 1M+ files.</p>

<p>When I first built the search engine, I tried spinning up ElasticSearch indices on my server. That worked for a few requests, until it would run out of memory. I thought there was something wrong with my code, but that wasn’t it - ElasticSearch recommends at least 4gb of RAM, but my server had 1 😂. I needed to optimize for load, but tuning ElasticSearch indices seemed like a painful proposition. So, I instead opted to use Mongodb, which happily handled searching my metadata. Then, users complained about how the bot was super slow. To optimize for latency, I benchmarked a few solutions and ultimately just wrote an engine that would go through chat history to find relevant files. This was a significant speedup for search on recent files, but much slower for extremely old files. I was going to invest in a more complex solution, but users didn’t complain about the speed of search (which told me that users generally just need to search recent files).</p>

<p>Around the same time, I read through Discord’s engineering blogs on <a href="https://discord.com/blog/how-discord-indexes-billions-of-messages">search</a> and <a href="https://discord.com/blog/how-discord-stores-trillions-of-messages">storage</a>. They drove decisions about maintaining elastic search indices for search using discussions around latency metrics, storage architecture, etc. Their approach seemed disciplined, but I had no idea how to emulate it on a smaller budget. Still, it was a good example of the kind of engineering philosophy required to build at “large-scale”. Reflecting on the experience showed me a lot of what I’d learned about software engineering in trying to scale my bot. I learned to approach hardware limitations, research others’ approaches and combine them with my own ideas to create a solution that fit my constraints.</p>

<hr />

<p>When I asked my friend for this advice, I was halfway through my SWE internship at Snowflake on the applied machine learning team. My project was focused around building the first MVP of a clustering function for Snowflake’s <a href="https://docs.snowflake.com/en/guides-overview-ml-powered-functions">Cortex ML functions</a>. In the first half of my internship, I built a wrapper around <a href="https://scikit-learn.org/stable/modules/generated/sklearn.cluster.KMeans.html">scikit-learn’s k-Means clustering</a>. In the second half, I focused on improving the latency and accuracy of my system. I also worked on an efficient algorithm to <a href="https://en.wikipedia.org/wiki/Determining_the_number_of_clusters_in_a_data_set">determine the number of clusters in a dataset</a>, which is what I want to focus on for this post.</p>

<h2 id="trying-to-estimate-the-number-of-clusters-in-a-dataset">Trying to estimate the number of clusters in a dataset</h2>

<p>When I began my work on methods to estimate the number of clusters in a dataset, I formulated a simple plan based on past research experience:</p>

<ol>
  <li>Conduct a literature review to evaluate existing methods for determining the number of clusters in a dataset. Try to answer some of these questions:
    <ul>
      <li>what is <em>necessary</em> to accomplish the task we have in mind?</li>
      <li>what is the state of the art (SOTA) method? Is the SOTA method tractable given our load and resources?</li>
      <li>what is the latency and efficacy of a particular method?</li>
    </ul>
  </li>
  <li>Choose and implement the best method.
    <ul>
      <li>Implement several approaches and iterate until you find an approach that works well</li>
      <li>Notice that this will typically bring you back to step 1, but there should be fewer things for you to research with every iteration</li>
    </ul>
  </li>
</ol>

<p><em>I’m always looking to learn more about effective research. If you have any suggestions, please share them (dhrumilp15[at]gmail[dot]com)!</em></p>

<p>Unfortunately, in step 1, I would read papers and articles about one particular technique, compare it against the papers and articles explaining another technique, and learn that each technique had its own strengths and drawbacks. I was hoping to find the <strong>best</strong> technique, some sort of holy grail that would always find the right number of clusters but was still tractable for massive customer datasets <em>(spoiler: this doesn’t exist, at least according to my research)</em>. Even worse, I didn’t want to start implementing anything until I’d decided on the algorithm and approach I wanted to take. So, I would compare minute details of algorithms, like whether generating reference distributions from the uniform distribution is better than randomly shuffling features of the data when using the <a href="https://en.wikipedia.org/wiki/Determining_the_number_of_clusters_in_a_data_set#The_gap_statistics">Gap Statistic</a>. When it started to become clear that no one metric was perfect, I thought of combining multiple metrics. The problem was, however, that I <strong>hadn’t written any code</strong>. I was debating methods based on notions of the datasets, but didn’t have any hard numbers to back it up. This sunk a catastrophic amount of time, because I couldn’t commit to any one approach. I had fallen prey to <strong>analysis paralysis</strong>.</p>

<p>In previous internships, my teammates typically shook me out of analysis paralysis by performing the tough task of choosing an approach for me. I’d present all of my analysis, and let them choose the <strong>best</strong> approach. I trusted their judgement, and they generally commented that the approach was more than enough for now and that we should start implementing 😊.</p>

<p>In my time at Snowflake, I was shaken out of analysis paralysis by my performance evaluation, which commented that I needed to take a more active stance in my project and improve my productivity 💀. When I heard the feedback, I was a little bit surprised, but not because I thought that the feedback was wrong. I realized that the feedback could be traced back to a somewhat simple cause: <strong>I just wasn’t communicating enough</strong>. I didn’t share what I was doing, my progress or what I envisioned for the future of the project.</p>

<p>I’d been following a working style from a previous internship, where some of the engineering advice I got was counter-productive, so I learned to show finished tasks rather than in-progress work. My performance evaluation at Snowflake showed me that I’d learned categorically wrong lessons - always share your work and agree on a plan to resolve engineering problems with new advice. This doesn’t mean that you must follow others’ plans over your own, but you should communicate about what you believe to be the best path forward so that you can discover better paths or keep everyone on the same page about why you’re doing whatever it is you’re doing.</p>

<p>I’d also sunk a lot of time floundering with different approaches for estimating the number of clusters in a dataset. I realized that, like previous internships, if I shared my in-progress analysis with my mentor, we’d see results much faster.</p>

<p>Spurred by my performance evaluation, I rapidly implemented multiple approaches and tested their efficacy on sample datasets. After seeing disappointing performance from multiple algorithms (including the SOTA algorithm), <strong>it finally dawned on me that a perfect approach doesn’t exist</strong>. I was genuinely crushed btw, I felt like someone had played a cruel joke on me and recorded my downfall for the world to see.</p>

<p>But, I’d made far more progress understanding the problem, which showed me that research and implementation need to go hand-in-hand. Anytime I compared two different approaches, in the lack of any other easily accessible information, the easiest and often fastest way to decide between them is to just implement both and see the results. In other words, to just</p>

<figure style="text-align: center">
<img src="https://tryitands.ee/tias_thumb.jpg" width="100%" height="auto" />
<figcaption>Try it and see! <a href="https://tryitands.ee" target="_blank">Original source</a></figcaption>
</figure>

<p>Implementing multiple approaches also showed me that my internal debates about minute algorithmic details were useless from both a research and practical standpoint. From a research standpoint, I was chasing options that were the least likely to produce sizeable benefits. Through implementation, you can focus your efforts to get the biggest gains upfront, and then later explore overhauls.</p>

<p>Practically, I can guess at the number of clusters forever, but customers will undoubtedly test multiple values. They would also much rather have new features built on top of the clustering function instead of a marginally more accurate estimate for the number of clusters.</p>

<h1 id="does-try-it-and-see-beat-analysis-paralysis">Does “Try it and see” beat analysis paralysis?</h1>

<p><strong>No.</strong> The truth is, implementation can get you out of analysis paralysis (e.g. lit. review hell), but blindly using <em>try it and see</em> will just have you further digging in a bottomless rabbit hole. You have to construct limits around <em>try it and see</em>, because you ultimately need to break free from endless exploration and commit to exploiting one particular approach.</p>

<p>I found a surprisingly simple way to combat analysis paralysis when I talked to the caricature artist who had come in for the office party. He drew caricatures in 10 minutes, and he explained that the time constraints taught him how to be confident, develop his own style and not think too hard about small details. His words reminded me of all of the doubt I’d been carrying in my work. His timeout meant that he couldn’t afford to agonize over every brush stroke, just like how I couldn’t afford to agonize over every particular algorithm.</p>

<p>Timeouts are also really common in the realm of games, where you also encounter analysis paralysis:</p>
<ul>
  <li>you could analyze a chess board forever, but a blitz game requires that you do it around 30-40 times in 5 minutes or less. You can’t afford to spend all your time analyzing one position, which means that you need to make decisions and adapt.</li>
  <li>other Avalon players will jump on you from a great height if you take forever to choose a team for the mission.</li>
</ul>

<p><strong>Try it and see</strong> was my method of escaping the lit. review phase of analysis paralysis, but I fell into a similar cycle while experimenting with different metrics: I tried tweaking several different clustering quality metrics (Davies-Bouldin score, Calinski-Harabasz score, etc.) to see if any of them would produce better results. Instituting a timeout forced me to just choose what seemed to work the best, and then move on to implement the rest of the project. If a better method appeared later, we would just replace the component.</p>

<h1 id="have-i-heard-this-before">Have I heard this before?</h1>

<p><em>Try it and see</em> is not a novel or unique idea. In writing this post, I thought about the advice I’ve heard before, and how it encapsulates very similar ideas:</p>

<ul>
  <li>“Don’t wait to gain the skills or knowledge you need to achieve what you want, they will come during the process”</li>
  <li>“The quality of founders is often determined not by the correctness of their decisions, but by how fast they can make them”</li>
  <li>“The best research students are those who can convert an idea to implementation really fast”</li>
</ul>

<p>Ultimately, these are effectively the same idea, and I’ve heard them countless times. I then wonder: why has it taken me so long to internalize these ideas even a little bit? It makes me wonder: is advice not advice until you can say the same thing yourself?</p>

<p>I’ve heard <em>“do what you love”</em> too many times to count, but I don’t think I truly understand it - how do you balance <em>“do what you love”</em> with familial obligations, or a failing economy? It seems like advice doesn’t actually become advice until I learn how to apply it, which tends to be when I can finally understand its message and say the same thing to someone else. So, <em>try it and see</em>.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[I asked my friend, who is much further in his SWE career, how to improve as a software engineer.]]></summary></entry></feed>